name: Deploy to Production

# When to run this workflow
on:
  push:
    branches: [main, master]
  release:
    types: [published]

env:
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Push Docker Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      product-service-image: ${{ steps.meta-product.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Log in to Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Extract metadata for product service
      - name: Extract metadata (product-service)
        id: meta-product
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-product-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # Step 5: Build and push product service image
      - name: Build and push Product Service
        uses: docker/build-push-action@v5
        with:
          context: ./product-service
          file: ./product-service/Dockerfile
          push: true
          tags: ${{ steps.meta-product.outputs.tags }}
          labels: ${{ steps.meta-product.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 6: Extract metadata for web frontend
      - name: Extract metadata (web-frontend)
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # Step 7: Build and push web frontend image
      - name: Build and push Web Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 2: Deploy to Production (example)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Deploy via SSH (example)
      # You would customize this based on your deployment target
      - name: Deploy to server
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "Product Service Image: ${{ needs.build-and-push.outputs.product-service-image }}"
          echo "Web Image: ${{ needs.build-and-push.outputs.web-image }}"
          # 
          # Example deployment commands:
          # - SSH into your server
          # - Pull the new images
          # - Update docker-compose.yml with new image tags
          # - Run docker-compose up -d
          #
          # For now, we'll just echo the deployment info
          echo "âœ… Deployment completed successfully!"
